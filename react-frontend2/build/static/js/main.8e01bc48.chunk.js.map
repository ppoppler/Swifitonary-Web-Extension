{"version":3,"sources":["Definition.js","BackendHelpers.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Definition","state","text","definition","chrome","runtime","onMessage","addListener","this","handleMessage","bind","sendRequest","sendMessage","target","type","msg","word","body","console","log","axios","get","params","then","res","data","catch","err","setState","react_default","a","createElement","className","undefined","pronunciation","all","results","map","info","partOfSpeech","Component","Router","react_router_dom","basename","process","react_router","path","render","Definition_Definition","App","Routes","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAIqBA,6MACnBC,MAAQ,CACNC,KAAM,GACNC,WAAY,yFAIZC,OAAOC,QAAQC,UAAUC,YAAYC,KAAKC,cAAcC,KAAKF,OAC7DA,KAAKG,oDAILP,OAAOC,QAAQO,YAAY,CAAEC,OAAQ,aAAcC,KAAM,6FAGvCC,4EACC,QAAfA,EAAIF,0BACW,eAAbE,EAAID,qCCnBgBE,EDoBiBD,EAAIE,KCnBjDC,QAAQC,IAAIH,GACLI,IAAMC,IAAI,+BAAgC,CAAEC,OAAQ,CAAEN,KAAMA,KAChEO,KAAK,SAAAC,GACJ,OAAOA,EAAIC,OAEZC,MAAM,SAAAC,GACLT,QAAQC,IAAIQ,YDaJxB,SACNe,QAAQC,IAAIhB,GACZK,KAAKoB,SAAS,CAAE1B,KAAMa,EAAIE,KAAMd,WAAYA,qCCtBvB,IAACa,oGD4B1B,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcxB,KAAKP,MAAMC,MACZ,OAA1BM,KAAKP,MAAME,YACV0B,EAAAC,EAAAC,cAAA,WACGb,QAAQC,SAA0Cc,IAAtCzB,KAAKP,MAAME,WAAW+B,oBACMD,IAAxCzB,KAAKP,MAAME,WAAW+B,eACrBL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACiC,OAA5CxB,KAAKP,MAAME,WAAW+B,cAAcC,IACjC3B,KAAKP,MAAME,WAAW+B,cAAcC,IACpC3B,KAAKP,MAAME,WAAW+B,eAG9BL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,cACCxB,KAAKP,MAAME,WAAWiC,QAAQC,IAAI,SAAAC,GAAI,OACrCT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcM,EAAKC,cAChCV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcM,EAAKnC,wBA5CRqC,aEUzBC,EATA,WACX,OACIZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAeC,SAAUC,IACzBf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAQ,kBAAMlB,EAAAC,EAAAC,cAACiB,EAAD,SAC9BnB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,eCMLG,0LARX,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAD,cAJUV,cCOEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAOlB,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.8e01bc48.chunk.js","sourcesContent":["/* global chrome */\r\nimport React, { Component } from \"react\";\r\nimport { getDefinition } from \"./BackendHelpers\";\r\n\r\nexport default class Definition extends Component {\r\n  state = {\r\n    text: \"\",\r\n    definition: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    chrome.runtime.onMessage.addListener(this.handleMessage.bind(this));\r\n    this.sendRequest();\r\n  }\r\n\r\n  sendRequest() {\r\n    chrome.runtime.sendMessage({ target: \"background\", type: \"definition\" });\r\n  }\r\n\r\n  async handleMessage(msg) {\r\n    if (msg.target === \"app\") {\r\n      if (msg.type === \"definition\") {\r\n        const definition = await getDefinition(msg.body);\r\n        console.log(definition);\r\n        this.setState({ text: msg.body, definition: definition });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container main-def\">\r\n        <h2 className=\"Montserrat\">{this.state.text}</h2>\r\n        {this.state.definition !== null && (\r\n          <div>\r\n            {console.log(this.state.definition.pronunciation===undefined)}\r\n            {this.state.definition.pronunciation !== undefined && \r\n              <h3 className=\"Montserrat\">\r\n                {this.state.definition.pronunciation.all !== null\r\n                  ? this.state.definition.pronunciation.all\r\n                  : this.state.definition.pronunciation}\r\n              </h3>\r\n            }\r\n            <h3 className=\"Montserrat\">Defintions</h3>\r\n            {this.state.definition.results.map(info => (\r\n              <div>\r\n                <hr />\r\n                <p className=\"Montserrat\">{info.partOfSpeech}</p>\r\n                <p className=\"Montserrat\">{info.definition}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const getDefinition = (word,response) => {\r\n  console.log(word);\r\n  return axios.get(\"http://localhost:5000/define\", { params: { word: word } })\r\n    .then(res => {\r\n      return res.data;\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const getSynonym = (word,response) => {\r\n  console.log(word);\r\n  return axios.get(\"http://localhost:5000/synonym\", {params: {word: word} })\r\n  .then(res => {\r\n    return res.data;\r\n  })\r\n  .catch(err => {\r\n    console.log(err);\r\n  });\r\n};\r\n","import {BrowserRouter, Route} from 'react-router-dom';\r\nimport React, {Component} from 'react';\r\nimport Definition from './Definition';\r\n\r\n\r\nconst Router = () => {\r\n    return(\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Route path=\"/\" render={() => <Definition />}></Route>\r\n        <Route path=\"/synonym\"></Route>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Router;","/* global chrome */\r\nimport React, { Component } from \"react\";\r\nimport Routes from \"./Routes\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Routes/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}